///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'HUU_LenhSanXuat'
// Generated by LLBLGen v1.3.5996.26197 Final on: Tuesday, March 9, 2021, 2:51:23 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace GasToanMy
{
	/// <summary>
	/// Purpose: Data Access class for the table 'HUU_LenhSanXuat'.
	/// </summary>
	public partial class clsHUU_LenhSanXuat : clsDBInteractionBase
	{
		#region Class Member Declarations
			private SqlBoolean		m_bNgungTheoDoi, m_bTonTai, m_bTrangThai_XuatKho_May_IN, m_bBoolMayDot, m_bBoolMayCat, m_bBoolMayIn, m_bGuiDuLieu, m_bTrangThai_NhapKho_May_CAT, m_bTrangThai_XuatKho_May_DOT, m_bTrangThai_NhapKho_May_DOT, m_bTrangThai_NhapKho_May_IN, m_bTrangThai_XuatKho_May_CAT;
			private SqlDateTime		m_daNgayThangSanXuat;
			private SqlInt32		m_iID_LenhSanXuat, m_iID_CongNhan, m_iID_LoaiMay, m_iID_CaTruong, m_iID_NguoiLap;
			private SqlString		m_sMaLenhSanXuat, m_sGhiChu, m_sCaSanXuat;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public clsHUU_LenhSanXuat()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>sMaLenhSanXuat</LI>
		///		 <LI>iID_LoaiMay</LI>
		///		 <LI>sCaSanXuat</LI>
		///		 <LI>daNgayThangSanXuat</LI>
		///		 <LI>iID_CongNhan</LI>
		///		 <LI>iID_CaTruong</LI>
		///		 <LI>sGhiChu</LI>
		///		 <LI>bTonTai</LI>
		///		 <LI>bNgungTheoDoi</LI>
		///		 <LI>iID_NguoiLap. May be SqlInt32.Null</LI>
		///		 <LI>bGuiDuLieu</LI>
		///		 <LI>bBoolMayIn</LI>
		///		 <LI>bBoolMayCat</LI>
		///		 <LI>bBoolMayDot</LI>
		///		 <LI>bTrangThai_XuatKho_May_IN</LI>
		///		 <LI>bTrangThai_NhapKho_May_IN</LI>
		///		 <LI>bTrangThai_XuatKho_May_CAT</LI>
		///		 <LI>bTrangThai_NhapKho_May_CAT</LI>
		///		 <LI>bTrangThai_XuatKho_May_DOT</LI>
		///		 <LI>bTrangThai_NhapKho_May_DOT</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iID_LenhSanXuat</LI>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_HUU_LenhSanXuat_Insert]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sMaLenhSanXuat", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaLenhSanXuat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_LoaiMay", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_LoaiMay));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCaSanXuat", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCaSanXuat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daNgayThangSanXuat", SqlDbType.SmallDateTime, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daNgayThangSanXuat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_CongNhan", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_CongNhan));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_CaTruong", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_CaTruong));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sGhiChu", SqlDbType.NVarChar, 450, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sGhiChu));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bTonTai", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bTonTai));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bNgungTheoDoi", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bNgungTheoDoi));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_NguoiLap", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_NguoiLap));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bGuiDuLieu", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bGuiDuLieu));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bboolMayIn", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bBoolMayIn));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bboolMayCat", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bBoolMayCat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bboolMayDot", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bBoolMayDot));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bTrangThai_XuatKho_May_IN", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bTrangThai_XuatKho_May_IN));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bTrangThai_NhapKho_May_IN", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bTrangThai_NhapKho_May_IN));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bTrangThai_XuatKho_May_CAT", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bTrangThai_XuatKho_May_CAT));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bTrangThai_NhapKho_May_CAT", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bTrangThai_NhapKho_May_CAT));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bTrangThai_XuatKho_May_DOT", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bTrangThai_XuatKho_May_DOT));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bTrangThai_NhapKho_May_DOT", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bTrangThai_NhapKho_May_DOT));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_LenhSanXuat", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iID_LenhSanXuat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iID_LenhSanXuat = (SqlInt32)scmCmdToExecute.Parameters["@iID_LenhSanXuat"].Value;
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_HUU_LenhSanXuat_Insert' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsHUU_LenhSanXuat::Insert::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID_LenhSanXuat</LI>
		///		 <LI>sMaLenhSanXuat</LI>
		///		 <LI>iID_LoaiMay</LI>
		///		 <LI>sCaSanXuat</LI>
		///		 <LI>daNgayThangSanXuat</LI>
		///		 <LI>iID_CongNhan</LI>
		///		 <LI>iID_CaTruong</LI>
		///		 <LI>sGhiChu</LI>
		///		 <LI>bTonTai</LI>
		///		 <LI>bNgungTheoDoi</LI>
		///		 <LI>iID_NguoiLap. May be SqlInt32.Null</LI>
		///		 <LI>bGuiDuLieu</LI>
		///		 <LI>bBoolMayIn</LI>
		///		 <LI>bBoolMayCat</LI>
		///		 <LI>bBoolMayDot</LI>
		///		 <LI>bTrangThai_XuatKho_May_IN</LI>
		///		 <LI>bTrangThai_NhapKho_May_IN</LI>
		///		 <LI>bTrangThai_XuatKho_May_CAT</LI>
		///		 <LI>bTrangThai_NhapKho_May_CAT</LI>
		///		 <LI>bTrangThai_XuatKho_May_DOT</LI>
		///		 <LI>bTrangThai_NhapKho_May_DOT</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_HUU_LenhSanXuat_Update]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_LenhSanXuat", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_LenhSanXuat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sMaLenhSanXuat", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaLenhSanXuat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_LoaiMay", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_LoaiMay));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCaSanXuat", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCaSanXuat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daNgayThangSanXuat", SqlDbType.SmallDateTime, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daNgayThangSanXuat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_CongNhan", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_CongNhan));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_CaTruong", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_CaTruong));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sGhiChu", SqlDbType.NVarChar, 450, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sGhiChu));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bTonTai", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bTonTai));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bNgungTheoDoi", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bNgungTheoDoi));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_NguoiLap", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_NguoiLap));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bGuiDuLieu", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bGuiDuLieu));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bboolMayIn", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bBoolMayIn));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bboolMayCat", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bBoolMayCat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bboolMayDot", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bBoolMayDot));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bTrangThai_XuatKho_May_IN", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bTrangThai_XuatKho_May_IN));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bTrangThai_NhapKho_May_IN", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bTrangThai_NhapKho_May_IN));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bTrangThai_XuatKho_May_CAT", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bTrangThai_XuatKho_May_CAT));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bTrangThai_NhapKho_May_CAT", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bTrangThai_NhapKho_May_CAT));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bTrangThai_XuatKho_May_DOT", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bTrangThai_XuatKho_May_DOT));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bTrangThai_NhapKho_May_DOT", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bTrangThai_NhapKho_May_DOT));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_HUU_LenhSanXuat_Update' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsHUU_LenhSanXuat::Update::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID_LenhSanXuat</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_HUU_LenhSanXuat_Delete]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_LenhSanXuat", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_LenhSanXuat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_HUU_LenhSanXuat_Delete' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsHUU_LenhSanXuat::Delete::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID_LenhSanXuat</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		///		 <LI>iID_LenhSanXuat</LI>
		///		 <LI>sMaLenhSanXuat</LI>
		///		 <LI>iID_LoaiMay</LI>
		///		 <LI>sCaSanXuat</LI>
		///		 <LI>daNgayThangSanXuat</LI>
		///		 <LI>iID_CongNhan</LI>
		///		 <LI>iID_CaTruong</LI>
		///		 <LI>sGhiChu</LI>
		///		 <LI>bTonTai</LI>
		///		 <LI>bNgungTheoDoi</LI>
		///		 <LI>iID_NguoiLap</LI>
		///		 <LI>bGuiDuLieu</LI>
		///		 <LI>bBoolMayIn</LI>
		///		 <LI>bBoolMayCat</LI>
		///		 <LI>bBoolMayDot</LI>
		///		 <LI>bTrangThai_XuatKho_May_IN</LI>
		///		 <LI>bTrangThai_NhapKho_May_IN</LI>
		///		 <LI>bTrangThai_XuatKho_May_CAT</LI>
		///		 <LI>bTrangThai_NhapKho_May_CAT</LI>
		///		 <LI>bTrangThai_XuatKho_May_DOT</LI>
		///		 <LI>bTrangThai_NhapKho_May_DOT</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_HUU_LenhSanXuat_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("HUU_LenhSanXuat");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_LenhSanXuat", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_LenhSanXuat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_HUU_LenhSanXuat_SelectOne' reported the ErrorCode: " + m_iErrorCode);
				}

				if(dtToReturn.Rows.Count > 0)
				{
					m_iID_LenhSanXuat = (Int32)dtToReturn.Rows[0]["ID_LenhSanXuat"];
					m_sMaLenhSanXuat = (string)dtToReturn.Rows[0]["MaLenhSanXuat"];
					m_iID_LoaiMay = (Int32)dtToReturn.Rows[0]["ID_LoaiMay"];
					m_sCaSanXuat = (string)dtToReturn.Rows[0]["CaSanXuat"];
					m_daNgayThangSanXuat = (DateTime)dtToReturn.Rows[0]["NgayThangSanXuat"];
					m_iID_CongNhan = (Int32)dtToReturn.Rows[0]["ID_CongNhan"];
					m_iID_CaTruong = (Int32)dtToReturn.Rows[0]["ID_CaTruong"];
					m_sGhiChu = (string)dtToReturn.Rows[0]["GhiChu"];
					m_bTonTai = (bool)dtToReturn.Rows[0]["TonTai"];
					m_bNgungTheoDoi = (bool)dtToReturn.Rows[0]["NgungTheoDoi"];
					m_iID_NguoiLap = dtToReturn.Rows[0]["ID_NguoiLap"] == System.DBNull.Value ? SqlInt32.Null : (Int32)dtToReturn.Rows[0]["ID_NguoiLap"];
					m_bGuiDuLieu = (bool)dtToReturn.Rows[0]["GuiDuLieu"];
					m_bBoolMayIn = (bool)dtToReturn.Rows[0]["boolMayIn"];
					m_bBoolMayCat = (bool)dtToReturn.Rows[0]["boolMayCat"];
					m_bBoolMayDot = (bool)dtToReturn.Rows[0]["boolMayDot"];
					m_bTrangThai_XuatKho_May_IN = (bool)dtToReturn.Rows[0]["TrangThai_XuatKho_May_IN"];
					m_bTrangThai_NhapKho_May_IN = (bool)dtToReturn.Rows[0]["TrangThai_NhapKho_May_IN"];
					m_bTrangThai_XuatKho_May_CAT = (bool)dtToReturn.Rows[0]["TrangThai_XuatKho_May_CAT"];
					m_bTrangThai_NhapKho_May_CAT = (bool)dtToReturn.Rows[0]["TrangThai_NhapKho_May_CAT"];
					m_bTrangThai_XuatKho_May_DOT = (bool)dtToReturn.Rows[0]["TrangThai_XuatKho_May_DOT"];
					m_bTrangThai_NhapKho_May_DOT = (bool)dtToReturn.Rows[0]["TrangThai_NhapKho_May_DOT"];
				}
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsHUU_LenhSanXuat::SelectOne::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_HUU_LenhSanXuat_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("HUU_LenhSanXuat");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_HUU_LenhSanXuat_SelectAll' reported the ErrorCode: " + m_iErrorCode);
				}

				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsHUU_LenhSanXuat::SelectAll::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlInt32 iID_LenhSanXuat
		{
			get
			{
				return m_iID_LenhSanXuat;
			}
			set
			{
				SqlInt32 iID_LenhSanXuatTmp = (SqlInt32)value;
				if(iID_LenhSanXuatTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iID_LenhSanXuat", "iID_LenhSanXuat can't be NULL");
				}
				m_iID_LenhSanXuat = value;
			}
		}


		public SqlString sMaLenhSanXuat
		{
			get
			{
				return m_sMaLenhSanXuat;
			}
			set
			{
				SqlString sMaLenhSanXuatTmp = (SqlString)value;
				if(sMaLenhSanXuatTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sMaLenhSanXuat", "sMaLenhSanXuat can't be NULL");
				}
				m_sMaLenhSanXuat = value;
			}
		}


		public SqlInt32 iID_LoaiMay
		{
			get
			{
				return m_iID_LoaiMay;
			}
			set
			{
				SqlInt32 iID_LoaiMayTmp = (SqlInt32)value;
				if(iID_LoaiMayTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iID_LoaiMay", "iID_LoaiMay can't be NULL");
				}
				m_iID_LoaiMay = value;
			}
		}


		public SqlString sCaSanXuat
		{
			get
			{
				return m_sCaSanXuat;
			}
			set
			{
				SqlString sCaSanXuatTmp = (SqlString)value;
				if(sCaSanXuatTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sCaSanXuat", "sCaSanXuat can't be NULL");
				}
				m_sCaSanXuat = value;
			}
		}


		public SqlDateTime daNgayThangSanXuat
		{
			get
			{
				return m_daNgayThangSanXuat;
			}
			set
			{
				SqlDateTime daNgayThangSanXuatTmp = (SqlDateTime)value;
				if(daNgayThangSanXuatTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("daNgayThangSanXuat", "daNgayThangSanXuat can't be NULL");
				}
				m_daNgayThangSanXuat = value;
			}
		}


		public SqlInt32 iID_CongNhan
		{
			get
			{
				return m_iID_CongNhan;
			}
			set
			{
				SqlInt32 iID_CongNhanTmp = (SqlInt32)value;
				if(iID_CongNhanTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iID_CongNhan", "iID_CongNhan can't be NULL");
				}
				m_iID_CongNhan = value;
			}
		}


		public SqlInt32 iID_CaTruong
		{
			get
			{
				return m_iID_CaTruong;
			}
			set
			{
				SqlInt32 iID_CaTruongTmp = (SqlInt32)value;
				if(iID_CaTruongTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iID_CaTruong", "iID_CaTruong can't be NULL");
				}
				m_iID_CaTruong = value;
			}
		}


		public SqlString sGhiChu
		{
			get
			{
				return m_sGhiChu;
			}
			set
			{
				SqlString sGhiChuTmp = (SqlString)value;
				if(sGhiChuTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sGhiChu", "sGhiChu can't be NULL");
				}
				m_sGhiChu = value;
			}
		}


		public SqlBoolean bTonTai
		{
			get
			{
				return m_bTonTai;
			}
			set
			{
				SqlBoolean bTonTaiTmp = (SqlBoolean)value;
				if(bTonTaiTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("bTonTai", "bTonTai can't be NULL");
				}
				m_bTonTai = value;
			}
		}


		public SqlBoolean bNgungTheoDoi
		{
			get
			{
				return m_bNgungTheoDoi;
			}
			set
			{
				SqlBoolean bNgungTheoDoiTmp = (SqlBoolean)value;
				if(bNgungTheoDoiTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("bNgungTheoDoi", "bNgungTheoDoi can't be NULL");
				}
				m_bNgungTheoDoi = value;
			}
		}


		public SqlInt32 iID_NguoiLap
		{
			get
			{
				return m_iID_NguoiLap;
			}
			set
			{
				SqlInt32 iID_NguoiLapTmp = (SqlInt32)value;
				if(iID_NguoiLapTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iID_NguoiLap", "iID_NguoiLap can't be NULL");
				}
				m_iID_NguoiLap = value;
			}
		}


		public SqlBoolean bGuiDuLieu
		{
			get
			{
				return m_bGuiDuLieu;
			}
			set
			{
				SqlBoolean bGuiDuLieuTmp = (SqlBoolean)value;
				if(bGuiDuLieuTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("bGuiDuLieu", "bGuiDuLieu can't be NULL");
				}
				m_bGuiDuLieu = value;
			}
		}


		public SqlBoolean bBoolMayIn
		{
			get
			{
				return m_bBoolMayIn;
			}
			set
			{
				SqlBoolean bBoolMayInTmp = (SqlBoolean)value;
				if(bBoolMayInTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("bBoolMayIn", "bBoolMayIn can't be NULL");
				}
				m_bBoolMayIn = value;
			}
		}


		public SqlBoolean bBoolMayCat
		{
			get
			{
				return m_bBoolMayCat;
			}
			set
			{
				SqlBoolean bBoolMayCatTmp = (SqlBoolean)value;
				if(bBoolMayCatTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("bBoolMayCat", "bBoolMayCat can't be NULL");
				}
				m_bBoolMayCat = value;
			}
		}


		public SqlBoolean bBoolMayDot
		{
			get
			{
				return m_bBoolMayDot;
			}
			set
			{
				SqlBoolean bBoolMayDotTmp = (SqlBoolean)value;
				if(bBoolMayDotTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("bBoolMayDot", "bBoolMayDot can't be NULL");
				}
				m_bBoolMayDot = value;
			}
		}


		public SqlBoolean bTrangThai_XuatKho_May_IN
		{
			get
			{
				return m_bTrangThai_XuatKho_May_IN;
			}
			set
			{
				SqlBoolean bTrangThai_XuatKho_May_INTmp = (SqlBoolean)value;
				if(bTrangThai_XuatKho_May_INTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("bTrangThai_XuatKho_May_IN", "bTrangThai_XuatKho_May_IN can't be NULL");
				}
				m_bTrangThai_XuatKho_May_IN = value;
			}
		}


		public SqlBoolean bTrangThai_NhapKho_May_IN
		{
			get
			{
				return m_bTrangThai_NhapKho_May_IN;
			}
			set
			{
				SqlBoolean bTrangThai_NhapKho_May_INTmp = (SqlBoolean)value;
				if(bTrangThai_NhapKho_May_INTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("bTrangThai_NhapKho_May_IN", "bTrangThai_NhapKho_May_IN can't be NULL");
				}
				m_bTrangThai_NhapKho_May_IN = value;
			}
		}


		public SqlBoolean bTrangThai_XuatKho_May_CAT
		{
			get
			{
				return m_bTrangThai_XuatKho_May_CAT;
			}
			set
			{
				SqlBoolean bTrangThai_XuatKho_May_CATTmp = (SqlBoolean)value;
				if(bTrangThai_XuatKho_May_CATTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("bTrangThai_XuatKho_May_CAT", "bTrangThai_XuatKho_May_CAT can't be NULL");
				}
				m_bTrangThai_XuatKho_May_CAT = value;
			}
		}


		public SqlBoolean bTrangThai_NhapKho_May_CAT
		{
			get
			{
				return m_bTrangThai_NhapKho_May_CAT;
			}
			set
			{
				SqlBoolean bTrangThai_NhapKho_May_CATTmp = (SqlBoolean)value;
				if(bTrangThai_NhapKho_May_CATTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("bTrangThai_NhapKho_May_CAT", "bTrangThai_NhapKho_May_CAT can't be NULL");
				}
				m_bTrangThai_NhapKho_May_CAT = value;
			}
		}


		public SqlBoolean bTrangThai_XuatKho_May_DOT
		{
			get
			{
				return m_bTrangThai_XuatKho_May_DOT;
			}
			set
			{
				SqlBoolean bTrangThai_XuatKho_May_DOTTmp = (SqlBoolean)value;
				if(bTrangThai_XuatKho_May_DOTTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("bTrangThai_XuatKho_May_DOT", "bTrangThai_XuatKho_May_DOT can't be NULL");
				}
				m_bTrangThai_XuatKho_May_DOT = value;
			}
		}


		public SqlBoolean bTrangThai_NhapKho_May_DOT
		{
			get
			{
				return m_bTrangThai_NhapKho_May_DOT;
			}
			set
			{
				SqlBoolean bTrangThai_NhapKho_May_DOTTmp = (SqlBoolean)value;
				if(bTrangThai_NhapKho_May_DOTTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("bTrangThai_NhapKho_May_DOT", "bTrangThai_NhapKho_May_DOT can't be NULL");
				}
				m_bTrangThai_NhapKho_May_DOT = value;
			}
		}
		#endregion
	}
}
