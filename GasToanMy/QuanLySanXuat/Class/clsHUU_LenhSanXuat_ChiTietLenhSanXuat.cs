///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'HUU_LenhSanXuat_ChiTietLenhSanXuat'
// Generated by LLBLGen v1.3.5996.26197 Final on: Wednesday, April 14, 2021, 3:52:02 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace GasToanMy
{
	/// <summary>
	/// Purpose: Data Access class for the table 'HUU_LenhSanXuat_ChiTietLenhSanXuat'.
	/// </summary>
	public partial class clsHUU_LenhSanXuat_ChiTietLenhSanXuat : clsDBInteractionBase
	{
		#region Class Member Declarations
			private SqlBoolean		m_bNgungTheoDoi, m_bTonTai;
			private SqlDouble		m_fPhePham, m_fSanLuongThuong, m_fSanLuongTangCa, m_fSoLuongVao, m_fDonGiaRa, m_fDonGiaVao;
			private SqlInt32		m_iID_ChiTietLenhSanXuat, m_iID_ChiTietPhieu, m_iID_LenhSanXuat, m_iID_SoPhieu, m_iID_VTHHRa, m_iID_VTHHVao;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public clsHUU_LenhSanXuat_ChiTietLenhSanXuat()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID_LenhSanXuat</LI>
		///		 <LI>iID_ChiTietPhieu</LI>
		///		 <LI>iID_SoPhieu</LI>
		///		 <LI>iID_VTHHVao</LI>
		///		 <LI>fSoLuongVao</LI>
		///		 <LI>iID_VTHHRa</LI>
		///		 <LI>fSanLuongThuong</LI>
		///		 <LI>fSanLuongTangCa</LI>
		///		 <LI>fPhePham</LI>
		///		 <LI>fDonGiaVao</LI>
		///		 <LI>fDonGiaRa</LI>
		///		 <LI>bNgungTheoDoi</LI>
		///		 <LI>bTonTai</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iID_ChiTietLenhSanXuat</LI>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_HUU_LenhSanXuat_ChiTietLenhSanXuat_Insert]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_LenhSanXuat", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_LenhSanXuat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_ChiTietPhieu", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_ChiTietPhieu));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_SoPhieu", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_SoPhieu));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_VTHHVao", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_VTHHVao));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@fSoLuongVao", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fSoLuongVao));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_VTHHRa", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_VTHHRa));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@fSanLuongThuong", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fSanLuongThuong));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@fSanLuongTangCa", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fSanLuongTangCa));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@fPhePham", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fPhePham));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@fDonGiaVao", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fDonGiaVao));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@fDonGiaRa", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fDonGiaRa));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bNgungTheoDoi", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bNgungTheoDoi));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bTonTai", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bTonTai));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_ChiTietLenhSanXuat", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iID_ChiTietLenhSanXuat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iID_ChiTietLenhSanXuat = (SqlInt32)scmCmdToExecute.Parameters["@iID_ChiTietLenhSanXuat"].Value;
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_HUU_LenhSanXuat_ChiTietLenhSanXuat_Insert' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsHUU_LenhSanXuat_ChiTietLenhSanXuat::Insert::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID_ChiTietLenhSanXuat</LI>
		///		 <LI>iID_LenhSanXuat</LI>
		///		 <LI>iID_ChiTietPhieu</LI>
		///		 <LI>iID_SoPhieu</LI>
		///		 <LI>iID_VTHHVao</LI>
		///		 <LI>fSoLuongVao</LI>
		///		 <LI>iID_VTHHRa</LI>
		///		 <LI>fSanLuongThuong</LI>
		///		 <LI>fSanLuongTangCa</LI>
		///		 <LI>fPhePham</LI>
		///		 <LI>fDonGiaVao</LI>
		///		 <LI>fDonGiaRa</LI>
		///		 <LI>bNgungTheoDoi</LI>
		///		 <LI>bTonTai</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_HUU_LenhSanXuat_ChiTietLenhSanXuat_Update]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_ChiTietLenhSanXuat", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_ChiTietLenhSanXuat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_LenhSanXuat", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_LenhSanXuat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_ChiTietPhieu", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_ChiTietPhieu));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_SoPhieu", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_SoPhieu));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_VTHHVao", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_VTHHVao));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@fSoLuongVao", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fSoLuongVao));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_VTHHRa", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_VTHHRa));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@fSanLuongThuong", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fSanLuongThuong));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@fSanLuongTangCa", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fSanLuongTangCa));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@fPhePham", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fPhePham));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@fDonGiaVao", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fDonGiaVao));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@fDonGiaRa", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fDonGiaRa));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bNgungTheoDoi", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bNgungTheoDoi));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bTonTai", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bTonTai));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_HUU_LenhSanXuat_ChiTietLenhSanXuat_Update' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsHUU_LenhSanXuat_ChiTietLenhSanXuat::Update::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID_ChiTietLenhSanXuat</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_HUU_LenhSanXuat_ChiTietLenhSanXuat_Delete]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_ChiTietLenhSanXuat", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_ChiTietLenhSanXuat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_HUU_LenhSanXuat_ChiTietLenhSanXuat_Delete' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsHUU_LenhSanXuat_ChiTietLenhSanXuat::Delete::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID_ChiTietLenhSanXuat</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		///		 <LI>iID_ChiTietLenhSanXuat</LI>
		///		 <LI>iID_LenhSanXuat</LI>
		///		 <LI>iID_ChiTietPhieu</LI>
		///		 <LI>iID_SoPhieu</LI>
		///		 <LI>iID_VTHHVao</LI>
		///		 <LI>fSoLuongVao</LI>
		///		 <LI>iID_VTHHRa</LI>
		///		 <LI>fSanLuongThuong</LI>
		///		 <LI>fSanLuongTangCa</LI>
		///		 <LI>fPhePham</LI>
		///		 <LI>fDonGiaVao</LI>
		///		 <LI>fDonGiaRa</LI>
		///		 <LI>bNgungTheoDoi</LI>
		///		 <LI>bTonTai</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_HUU_LenhSanXuat_ChiTietLenhSanXuat_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("HUU_LenhSanXuat_ChiTietLenhSanXuat");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_ChiTietLenhSanXuat", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_ChiTietLenhSanXuat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_HUU_LenhSanXuat_ChiTietLenhSanXuat_SelectOne' reported the ErrorCode: " + m_iErrorCode);
				}

				if(dtToReturn.Rows.Count > 0)
				{
					m_iID_ChiTietLenhSanXuat = (Int32)dtToReturn.Rows[0]["ID_ChiTietLenhSanXuat"];
					m_iID_LenhSanXuat = (Int32)dtToReturn.Rows[0]["ID_LenhSanXuat"];
					m_iID_ChiTietPhieu = (Int32)dtToReturn.Rows[0]["ID_ChiTietPhieu"];
					m_iID_SoPhieu = (Int32)dtToReturn.Rows[0]["ID_SoPhieu"];
					m_iID_VTHHVao = (Int32)dtToReturn.Rows[0]["ID_VTHHVao"];
					m_fSoLuongVao = (double)dtToReturn.Rows[0]["SoLuongVao"];
					m_iID_VTHHRa = (Int32)dtToReturn.Rows[0]["ID_VTHHRa"];
					m_fSanLuongThuong = (double)dtToReturn.Rows[0]["SanLuongThuong"];
					m_fSanLuongTangCa = (double)dtToReturn.Rows[0]["SanLuongTangCa"];
					m_fPhePham = (double)dtToReturn.Rows[0]["PhePham"];
					m_fDonGiaVao = (double)dtToReturn.Rows[0]["DonGiaVao"];
					m_fDonGiaRa = (double)dtToReturn.Rows[0]["DonGiaRa"];
					m_bNgungTheoDoi = (bool)dtToReturn.Rows[0]["NgungTheoDoi"];
					m_bTonTai = (bool)dtToReturn.Rows[0]["TonTai"];
				}
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsHUU_LenhSanXuat_ChiTietLenhSanXuat::SelectOne::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_HUU_LenhSanXuat_ChiTietLenhSanXuat_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("HUU_LenhSanXuat_ChiTietLenhSanXuat");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_HUU_LenhSanXuat_ChiTietLenhSanXuat_SelectAll' reported the ErrorCode: " + m_iErrorCode);
				}

				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsHUU_LenhSanXuat_ChiTietLenhSanXuat::SelectAll::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlInt32 iID_ChiTietLenhSanXuat
		{
			get
			{
				return m_iID_ChiTietLenhSanXuat;
			}
			set
			{
				SqlInt32 iID_ChiTietLenhSanXuatTmp = (SqlInt32)value;
				if(iID_ChiTietLenhSanXuatTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iID_ChiTietLenhSanXuat", "iID_ChiTietLenhSanXuat can't be NULL");
				}
				m_iID_ChiTietLenhSanXuat = value;
			}
		}


		public SqlInt32 iID_LenhSanXuat
		{
			get
			{
				return m_iID_LenhSanXuat;
			}
			set
			{
				SqlInt32 iID_LenhSanXuatTmp = (SqlInt32)value;
				if(iID_LenhSanXuatTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iID_LenhSanXuat", "iID_LenhSanXuat can't be NULL");
				}
				m_iID_LenhSanXuat = value;
			}
		}


		public SqlInt32 iID_ChiTietPhieu
		{
			get
			{
				return m_iID_ChiTietPhieu;
			}
			set
			{
				SqlInt32 iID_ChiTietPhieuTmp = (SqlInt32)value;
				if(iID_ChiTietPhieuTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iID_ChiTietPhieu", "iID_ChiTietPhieu can't be NULL");
				}
				m_iID_ChiTietPhieu = value;
			}
		}


		public SqlInt32 iID_SoPhieu
		{
			get
			{
				return m_iID_SoPhieu;
			}
			set
			{
				SqlInt32 iID_SoPhieuTmp = (SqlInt32)value;
				if(iID_SoPhieuTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iID_SoPhieu", "iID_SoPhieu can't be NULL");
				}
				m_iID_SoPhieu = value;
			}
		}


		public SqlInt32 iID_VTHHVao
		{
			get
			{
				return m_iID_VTHHVao;
			}
			set
			{
				SqlInt32 iID_VTHHVaoTmp = (SqlInt32)value;
				if(iID_VTHHVaoTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iID_VTHHVao", "iID_VTHHVao can't be NULL");
				}
				m_iID_VTHHVao = value;
			}
		}


		public SqlDouble fSoLuongVao
		{
			get
			{
				return m_fSoLuongVao;
			}
			set
			{
				SqlDouble fSoLuongVaoTmp = (SqlDouble)value;
				if(fSoLuongVaoTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("fSoLuongVao", "fSoLuongVao can't be NULL");
				}
				m_fSoLuongVao = value;
			}
		}


		public SqlInt32 iID_VTHHRa
		{
			get
			{
				return m_iID_VTHHRa;
			}
			set
			{
				SqlInt32 iID_VTHHRaTmp = (SqlInt32)value;
				if(iID_VTHHRaTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iID_VTHHRa", "iID_VTHHRa can't be NULL");
				}
				m_iID_VTHHRa = value;
			}
		}


		public SqlDouble fSanLuongThuong
		{
			get
			{
				return m_fSanLuongThuong;
			}
			set
			{
				SqlDouble fSanLuongThuongTmp = (SqlDouble)value;
				if(fSanLuongThuongTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("fSanLuongThuong", "fSanLuongThuong can't be NULL");
				}
				m_fSanLuongThuong = value;
			}
		}


		public SqlDouble fSanLuongTangCa
		{
			get
			{
				return m_fSanLuongTangCa;
			}
			set
			{
				SqlDouble fSanLuongTangCaTmp = (SqlDouble)value;
				if(fSanLuongTangCaTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("fSanLuongTangCa", "fSanLuongTangCa can't be NULL");
				}
				m_fSanLuongTangCa = value;
			}
		}


		public SqlDouble fPhePham
		{
			get
			{
				return m_fPhePham;
			}
			set
			{
				SqlDouble fPhePhamTmp = (SqlDouble)value;
				if(fPhePhamTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("fPhePham", "fPhePham can't be NULL");
				}
				m_fPhePham = value;
			}
		}


		public SqlDouble fDonGiaVao
		{
			get
			{
				return m_fDonGiaVao;
			}
			set
			{
				SqlDouble fDonGiaVaoTmp = (SqlDouble)value;
				if(fDonGiaVaoTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("fDonGiaVao", "fDonGiaVao can't be NULL");
				}
				m_fDonGiaVao = value;
			}
		}


		public SqlDouble fDonGiaRa
		{
			get
			{
				return m_fDonGiaRa;
			}
			set
			{
				SqlDouble fDonGiaRaTmp = (SqlDouble)value;
				if(fDonGiaRaTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("fDonGiaRa", "fDonGiaRa can't be NULL");
				}
				m_fDonGiaRa = value;
			}
		}


		public SqlBoolean bNgungTheoDoi
		{
			get
			{
				return m_bNgungTheoDoi;
			}
			set
			{
				SqlBoolean bNgungTheoDoiTmp = (SqlBoolean)value;
				if(bNgungTheoDoiTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("bNgungTheoDoi", "bNgungTheoDoi can't be NULL");
				}
				m_bNgungTheoDoi = value;
			}
		}


		public SqlBoolean bTonTai
		{
			get
			{
				return m_bTonTai;
			}
			set
			{
				SqlBoolean bTonTaiTmp = (SqlBoolean)value;
				if(bTonTaiTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("bTonTai", "bTonTai can't be NULL");
				}
				m_bTonTai = value;
			}
		}
		#endregion
	}
}
