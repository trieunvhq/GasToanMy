///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'SanPham'
// Generated by LLBLGen v1.3.5996.26197 Final on: Monday, March 21, 2022, 11:24:54 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace GasToanMy
{
	/// <summary>
	/// Purpose: Data Access class for the table 'SanPham'.
	/// </summary>
	public class clsSanPham : clsDBInteractionBase
	{
		#region Class Member Declarations
			private SqlString		m_sType, m_sRecordStatus;
			private SqlDateTime		m_daUpdateDate, m_daCreateDate;
			private SqlDecimal		m_dcGiaVon, m_dcGiaBan;
			private SqlDouble		m_fSoLuong;
			private SqlInt32		m_iCreateUser, m_iUpdateUser, m_iID;
			private SqlString		m_sTenSanPham, m_sPhanNhom, m_sCode, m_sDescription, m_sNhaCungCap, m_sDonViTinh;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public clsSanPham()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>sType. May be SqlString.Null</LI>
		///		 <LI>sCode. May be SqlString.Null</LI>
		///		 <LI>sPhanNhom. May be SqlString.Null</LI>
		///		 <LI>sTenSanPham. May be SqlString.Null</LI>
		///		 <LI>sDonViTinh. May be SqlString.Null</LI>
		///		 <LI>sNhaCungCap. May be SqlString.Null</LI>
		///		 <LI>fSoLuong. May be SqlDouble.Null</LI>
		///		 <LI>dcGiaVon. May be SqlDecimal.Null</LI>
		///		 <LI>dcGiaBan. May be SqlDecimal.Null</LI>
		///		 <LI>sDescription. May be SqlString.Null</LI>
		///		 <LI>sRecordStatus. May be SqlString.Null</LI>
		///		 <LI>daCreateDate. May be SqlDateTime.Null</LI>
		///		 <LI>iCreateUser. May be SqlInt32.Null</LI>
		///		 <LI>daUpdateDate. May be SqlDateTime.Null</LI>
		///		 <LI>iUpdateUser. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iID</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[SanPham_Insert]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sType", SqlDbType.Char, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sType));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCode", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCode));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPhanNhom", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPhanNhom));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sTenSanPham", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sTenSanPham));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sDonViTinh", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sDonViTinh));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sNhaCungCap", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sNhaCungCap));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@fSoLuong", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fSoLuong));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcGiaVon", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 0, "", DataRowVersion.Proposed, m_dcGiaVon));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcGiaBan", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 0, "", DataRowVersion.Proposed, m_dcGiaBan));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sDescription", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sDescription));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sRecordStatus", SqlDbType.Char, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sRecordStatus));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daCreateDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daCreateDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iCreateUser", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iCreateUser));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daUpdateDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daUpdateDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iUpdateUser", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iUpdateUser));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iID));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iID = (SqlInt32)scmCmdToExecute.Parameters["@iID"].Value;
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsSanPham::Insert::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID</LI>
		///		 <LI>sType. May be SqlString.Null</LI>
		///		 <LI>sCode. May be SqlString.Null</LI>
		///		 <LI>sPhanNhom. May be SqlString.Null</LI>
		///		 <LI>sTenSanPham. May be SqlString.Null</LI>
		///		 <LI>sDonViTinh. May be SqlString.Null</LI>
		///		 <LI>sNhaCungCap. May be SqlString.Null</LI>
		///		 <LI>fSoLuong. May be SqlDouble.Null</LI>
		///		 <LI>dcGiaVon. May be SqlDecimal.Null</LI>
		///		 <LI>dcGiaBan. May be SqlDecimal.Null</LI>
		///		 <LI>sDescription. May be SqlString.Null</LI>
		///		 <LI>sRecordStatus. May be SqlString.Null</LI>
		///		 <LI>daCreateDate. May be SqlDateTime.Null</LI>
		///		 <LI>iCreateUser. May be SqlInt32.Null</LI>
		///		 <LI>daUpdateDate. May be SqlDateTime.Null</LI>
		///		 <LI>iUpdateUser. May be SqlInt32.Null</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[SanPham_Update]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sType", SqlDbType.Char, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sType));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCode", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCode));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPhanNhom", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPhanNhom));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sTenSanPham", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sTenSanPham));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sDonViTinh", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sDonViTinh));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sNhaCungCap", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sNhaCungCap));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@fSoLuong", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fSoLuong));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcGiaVon", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 0, "", DataRowVersion.Proposed, m_dcGiaVon));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcGiaBan", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 0, "", DataRowVersion.Proposed, m_dcGiaBan));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sDescription", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sDescription));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sRecordStatus", SqlDbType.Char, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sRecordStatus));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daCreateDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daCreateDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iCreateUser", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iCreateUser));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daUpdateDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daUpdateDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iUpdateUser", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iUpdateUser));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsSanPham::Update::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[SanPham_Delete]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsSanPham::Delete::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID</LI>
		/// </UL>
		///		 <LI>iID</LI>
		///		 <LI>sType</LI>
		///		 <LI>sCode</LI>
		///		 <LI>sPhanNhom</LI>
		///		 <LI>sTenSanPham</LI>
		///		 <LI>sDonViTinh</LI>
		///		 <LI>sNhaCungCap</LI>
		///		 <LI>fSoLuong</LI>
		///		 <LI>dcGiaVon</LI>
		///		 <LI>dcGiaBan</LI>
		///		 <LI>sDescription</LI>
		///		 <LI>sRecordStatus</LI>
		///		 <LI>daCreateDate</LI>
		///		 <LI>iCreateUser</LI>
		///		 <LI>daUpdateDate</LI>
		///		 <LI>iUpdateUser</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[SanPham_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("SanPham");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				if(dtToReturn.Rows.Count > 0)
				{
					m_iID = (Int32)dtToReturn.Rows[0]["ID"];
					m_sType = dtToReturn.Rows[0]["Type"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Type"];
					m_sCode = dtToReturn.Rows[0]["Code"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Code"];
					m_sPhanNhom = dtToReturn.Rows[0]["PhanNhom"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["PhanNhom"];
					m_sTenSanPham = dtToReturn.Rows[0]["TenSanPham"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["TenSanPham"];
					m_sDonViTinh = dtToReturn.Rows[0]["DonViTinh"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["DonViTinh"];
					m_sNhaCungCap = dtToReturn.Rows[0]["NhaCungCap"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["NhaCungCap"];
					m_fSoLuong = dtToReturn.Rows[0]["SoLuong"] == System.DBNull.Value ? SqlDouble.Null : (double)dtToReturn.Rows[0]["SoLuong"];
					m_dcGiaVon = dtToReturn.Rows[0]["GiaVon"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["GiaVon"];
					m_dcGiaBan = dtToReturn.Rows[0]["GiaBan"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["GiaBan"];
					m_sDescription = dtToReturn.Rows[0]["Description"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Description"];
					m_sRecordStatus = dtToReturn.Rows[0]["RecordStatus"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["RecordStatus"];
					m_daCreateDate = dtToReturn.Rows[0]["CreateDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)dtToReturn.Rows[0]["CreateDate"];
					m_iCreateUser = dtToReturn.Rows[0]["CreateUser"] == System.DBNull.Value ? SqlInt32.Null : (Int32)dtToReturn.Rows[0]["CreateUser"];
					m_daUpdateDate = dtToReturn.Rows[0]["UpdateDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)dtToReturn.Rows[0]["UpdateDate"];
					m_iUpdateUser = dtToReturn.Rows[0]["UpdateUser"] == System.DBNull.Value ? SqlInt32.Null : (Int32)dtToReturn.Rows[0]["UpdateUser"];
				}
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsSanPham::SelectOne::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[SanPham_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("SanPham");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsSanPham::SelectAll::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlInt32 iID
		{
			get
			{
				return m_iID;
			}
			set
			{
				SqlInt32 iIDTmp = (SqlInt32)value;
				if(iIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iID", "iID can't be NULL");
				}
				m_iID = value;
			}
		}


		public SqlString sType
		{
			get
			{
				return m_sType;
			}
			set
			{
				SqlString sTypeTmp = (SqlString)value;
				if(sTypeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sType", "sType can't be NULL");
				}
				m_sType = value;
			}
		}


		public SqlString sCode
		{
			get
			{
				return m_sCode;
			}
			set
			{
				SqlString sCodeTmp = (SqlString)value;
				if(sCodeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sCode", "sCode can't be NULL");
				}
				m_sCode = value;
			}
		}


		public SqlString sPhanNhom
		{
			get
			{
				return m_sPhanNhom;
			}
			set
			{
				SqlString sPhanNhomTmp = (SqlString)value;
				if(sPhanNhomTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sPhanNhom", "sPhanNhom can't be NULL");
				}
				m_sPhanNhom = value;
			}
		}


		public SqlString sTenSanPham
		{
			get
			{
				return m_sTenSanPham;
			}
			set
			{
				SqlString sTenSanPhamTmp = (SqlString)value;
				if(sTenSanPhamTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sTenSanPham", "sTenSanPham can't be NULL");
				}
				m_sTenSanPham = value;
			}
		}


		public SqlString sDonViTinh
		{
			get
			{
				return m_sDonViTinh;
			}
			set
			{
				SqlString sDonViTinhTmp = (SqlString)value;
				if(sDonViTinhTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sDonViTinh", "sDonViTinh can't be NULL");
				}
				m_sDonViTinh = value;
			}
		}


		public SqlString sNhaCungCap
		{
			get
			{
				return m_sNhaCungCap;
			}
			set
			{
				SqlString sNhaCungCapTmp = (SqlString)value;
				if(sNhaCungCapTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sNhaCungCap", "sNhaCungCap can't be NULL");
				}
				m_sNhaCungCap = value;
			}
		}


		public SqlDouble fSoLuong
		{
			get
			{
				return m_fSoLuong;
			}
			set
			{
				SqlDouble fSoLuongTmp = (SqlDouble)value;
				if(fSoLuongTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("fSoLuong", "fSoLuong can't be NULL");
				}
				m_fSoLuong = value;
			}
		}


		public SqlDecimal dcGiaVon
		{
			get
			{
				return m_dcGiaVon;
			}
			set
			{
				SqlDecimal dcGiaVonTmp = (SqlDecimal)value;
				if(dcGiaVonTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("dcGiaVon", "dcGiaVon can't be NULL");
				}
				m_dcGiaVon = value;
			}
		}


		public SqlDecimal dcGiaBan
		{
			get
			{
				return m_dcGiaBan;
			}
			set
			{
				SqlDecimal dcGiaBanTmp = (SqlDecimal)value;
				if(dcGiaBanTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("dcGiaBan", "dcGiaBan can't be NULL");
				}
				m_dcGiaBan = value;
			}
		}


		public SqlString sDescription
		{
			get
			{
				return m_sDescription;
			}
			set
			{
				SqlString sDescriptionTmp = (SqlString)value;
				if(sDescriptionTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sDescription", "sDescription can't be NULL");
				}
				m_sDescription = value;
			}
		}


		public SqlString sRecordStatus
		{
			get
			{
				return m_sRecordStatus;
			}
			set
			{
				SqlString sRecordStatusTmp = (SqlString)value;
				if(sRecordStatusTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sRecordStatus", "sRecordStatus can't be NULL");
				}
				m_sRecordStatus = value;
			}
		}


		public SqlDateTime daCreateDate
		{
			get
			{
				return m_daCreateDate;
			}
			set
			{
				SqlDateTime daCreateDateTmp = (SqlDateTime)value;
				if(daCreateDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("daCreateDate", "daCreateDate can't be NULL");
				}
				m_daCreateDate = value;
			}
		}


		public SqlInt32 iCreateUser
		{
			get
			{
				return m_iCreateUser;
			}
			set
			{
				SqlInt32 iCreateUserTmp = (SqlInt32)value;
				if(iCreateUserTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iCreateUser", "iCreateUser can't be NULL");
				}
				m_iCreateUser = value;
			}
		}


		public SqlDateTime daUpdateDate
		{
			get
			{
				return m_daUpdateDate;
			}
			set
			{
				SqlDateTime daUpdateDateTmp = (SqlDateTime)value;
				if(daUpdateDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("daUpdateDate", "daUpdateDate can't be NULL");
				}
				m_daUpdateDate = value;
			}
		}


		public SqlInt32 iUpdateUser
		{
			get
			{
				return m_iUpdateUser;
			}
			set
			{
				SqlInt32 iUpdateUserTmp = (SqlInt32)value;
				if(iUpdateUserTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iUpdateUser", "iUpdateUser can't be NULL");
				}
				m_iUpdateUser = value;
			}
		}
		#endregion
	}
}
